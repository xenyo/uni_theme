{"mappings":"YAKe,SAAAA,EAAuBC,EAAMC,GAE1C,OADAA,EAA2B,MAAdA,EAAqBD,EAAKE,OAAS,GAAKD,EAC9C,WAIL,IAHA,IAAIC,EAASC,KAAKC,IAAIC,UAAUH,OAASD,EAAY,GACjDK,EAAOC,MAAML,GACbM,EAAQ,EACLA,EAAQN,EAAQM,IACrBF,EAAKE,GAASH,UAAUG,EAAQP,GAElC,OAAQA,GACN,KAAK,EAAG,OAAOD,EAAKS,KAAKC,KAAMJ,GAC/B,KAAK,EAAG,OAAON,EAAKS,KAAKC,KAAML,UAAU,GAAIC,GAC7C,KAAK,EAAG,OAAON,EAAKS,KAAKC,KAAML,UAAU,GAAIA,UAAU,GAAIC,GAE7D,IAAIK,EAAOJ,MAAMN,EAAa,GAC9B,IAAKO,EAAQ,EAAGA,EAAQP,EAAYO,IAClCG,EAAKH,GAASH,UAAUG,GAG1B,OADAG,EAAKV,GAAcK,EACZN,EAAKY,MAAMF,KAAMC,E,ECvB5B,IAAAE,EAAeC,KAAKC,KAAO,WACzB,OAAO,IAAID,MAAOE,S,ECKL,SAAAC,EAAkBjB,EAAMkB,EAAMC,GAC3C,IAAIC,EAASC,EAAUV,EAAMW,EAAQC,EAEjCC,EAAQ,WACV,IAAIC,EAASZ,IAAQQ,EACjBH,EAAOO,EACTL,EAAUM,WAAWF,EAAON,EAAOO,IAEnCL,EAAU,KACLD,IAAWG,EAAStB,EAAKY,MAAMW,EAASZ,IAExCS,IAAST,EAAOY,EAAU,M,EAI/BI,EAAY5B,GAAc,SAAS6B,GAQrC,OAPAL,EAAUb,KACVC,EAAOiB,EACPP,EAAWR,IACNO,IACHA,EAAUM,WAAWF,EAAON,GACxBC,IAAWG,EAAStB,EAAKY,MAAMW,EAASZ,KAEvCW,C,IAQT,OALAK,EAAUE,OAAS,WACjBC,aAAaV,GACbA,EAAUT,EAAOY,EAAU,I,EAGtBI,C,CCpCR,MACC,MAAMI,EAAY,oCAClBC,OAAOC,UAAUF,GAAa,CAC5BG,OAAQ,CAACX,EAASY,KAChBC,KAAKL,EAAW,6BAA6BM,SAAQC,IACnDC,OAAOC,iBAAiB,SAAUvB,GAAS,KACzC,MAAMwB,EAASH,EAAMI,aACrBC,SAASC,KAAKC,MAAMC,cAAgB,GAAGL,KAAU,GAChD,KAAK,GACR,EAGP,EAZA,E","sources":["node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/restArguments.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/now.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/debounce.js","templates/block/block--local-tasks-block/block--local-tasks-block.mjs"],"sourcesContent":["// Some functions take a variable number of arguments, or a few expected\n// arguments at the beginning and then a variable number of values to operate\n// on. This helper accumulates all remaining arguments past the function’s\n// argument length (or an explicit `startIndex`), into an array that becomes\n// the last argument. Similar to ES6’s \"rest parameter\".\nexport default function restArguments(func, startIndex) {\n  startIndex = startIndex == null ? func.length - 1 : +startIndex;\n  return function() {\n    var length = Math.max(arguments.length - startIndex, 0),\n        rest = Array(length),\n        index = 0;\n    for (; index < length; index++) {\n      rest[index] = arguments[index + startIndex];\n    }\n    switch (startIndex) {\n      case 0: return func.call(this, rest);\n      case 1: return func.call(this, arguments[0], rest);\n      case 2: return func.call(this, arguments[0], arguments[1], rest);\n    }\n    var args = Array(startIndex + 1);\n    for (index = 0; index < startIndex; index++) {\n      args[index] = arguments[index];\n    }\n    args[startIndex] = rest;\n    return func.apply(this, args);\n  };\n}\n","// A (possibly faster) way to get the current timestamp as an integer.\nexport default Date.now || function() {\n  return new Date().getTime();\n};\n","import restArguments from './restArguments.js';\nimport now from './now.js';\n\n// When a sequence of calls of the returned function ends, the argument\n// function is triggered. The end of a sequence is defined by the `wait`\n// parameter. If `immediate` is passed, the argument function will be\n// triggered at the beginning of the sequence instead of at the end.\nexport default function debounce(func, wait, immediate) {\n  var timeout, previous, args, result, context;\n\n  var later = function() {\n    var passed = now() - previous;\n    if (wait > passed) {\n      timeout = setTimeout(later, wait - passed);\n    } else {\n      timeout = null;\n      if (!immediate) result = func.apply(context, args);\n      // This check is needed because `func` can recursively invoke `debounced`.\n      if (!timeout) args = context = null;\n    }\n  };\n\n  var debounced = restArguments(function(_args) {\n    context = this;\n    args = _args;\n    previous = now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n      if (immediate) result = func.apply(context, args);\n    }\n    return result;\n  });\n\n  debounced.cancel = function() {\n    clearTimeout(timeout);\n    timeout = args = context = null;\n  };\n\n  return debounced;\n}\n","import debounce from 'underscore/modules/debounce';\n\n(() => {\n  const component = 'uni_base:block--local-tasks-block';\n  Drupal.behaviors[component] = {\n    attach: (context, settings) => {\n      once(component, '.block--local-tasks-block').forEach(block => {\n        window.addEventListener('resize', debounce(() => {\n          const height = block.offsetHeight;\n          document.body.style.paddingBottom = `${height}px`;\n        }, 150));\n      });\n    }\n  }\n})();\n"],"names":["$d7d4a9bf3611ea6b$export$2e2bcd8739ae039","func","startIndex","length","Math","max","arguments","rest","Array","index","call","this","args","apply","$49a6789b0145c129$export$2e2bcd8739ae039","Date","now","getTime","$82558f2fa9c16b34$export$2e2bcd8739ae039","wait","immediate","timeout","previous","result","context","later","passed","setTimeout","debounced","_args","cancel","clearTimeout","component","Drupal","behaviors","attach","settings","once","forEach","block","window","addEventListener","height","offsetHeight","document","body","style","paddingBottom"],"version":3,"file":"block--local-tasks-block.js.map"}