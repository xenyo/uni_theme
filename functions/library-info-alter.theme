<?php

function uni_base_library_info_alter(&$libraries, $extension) {
  // Ensure extension is an active theme or base theme
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme();
  $active_theme_name = $active_theme->getName();
  $active_base_themes = $active_theme->getBaseThemeExtensions();
  if (!($extension === $active_theme_name || isset($active_base_themes[$extension]))) return;

  // Compute theme weight
  $theme_weights = array_flip(array_reverse(array_merge([ $active_theme_name ], array_keys($active_base_themes))));
  $theme_weight = $theme_weights[$extension];

  // Get theme path
  $theme_path = \Drupal::service('extension.list.theme')->getPath($extension);

  $auto_libraries = [];

  // Adds a library
  $add_library = function ($library_name, $path) use (&$auto_libraries, $theme_path, $theme_weight) {
    $library_path = substr($path, strlen($theme_path) + 1);
    $file_type = pathinfo($path, PATHINFO_EXTENSION);
    if ($file_type === 'css') {
      preg_match('/\.(base|layout|component|theme)\.css$/', $library_path, $group_matches);
      $group = $group_matches[1] ?? 'theme';
      $auto_libraries[$library_name][$file_type][$group][$library_path] = [ 'weight' => $theme_weight ];
    } else if ($file_type === 'js') {
      $auto_libraries[$library_name][$file_type][$library_path] = [ 'weight' => $theme_weight - 50 ];
    }
  };

  // Add global library
  $global_path = $theme_path . '/dist/global';
  if (is_dir($global_path)) {
    $global_files = \Drupal::service('file_system')->scanDirectory($global_path, '/\.(js|css)$/');
    foreach ($global_files as $global_file) {
      $add_library('global', $global_file->uri);
    }
  }

  // Add local libraries
  $local_path = $theme_path . '/dist/local';
  if (is_dir($local_path)) {
    $local_files = \Drupal::service('file_system')->scanDirectory($local_path, '/\.(js|css)$/');
    foreach ($local_files as $local_file) {
      $add_library(explode('.', $local_file->name)[0], $local_file->uri);
    }
  }

  // Merge result
  $libraries = array_replace_recursive($libraries, $auto_libraries);
}
